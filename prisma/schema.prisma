// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}


model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    discriminator String?
    displayTag    Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    roomId        String?
    room          Room? @relation(fields: [roomId], references:[id])

    @@index([roomId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id String @id
    createdAt DateTime @default(now())
    ownerId String
    users User[]
    playlist Song[] 
    anonymous Boolean
    chat Boolean
}

model Song {
    id String @id @default(cuid())
    youtubeId String
    title String
    artist String
    thumbnail String
    roomId String
    room Room @relation(fields: [roomId], references: [id])

    @@index([roomId])
}