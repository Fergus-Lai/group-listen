import { type NextPage } from "next";
import Head from "next/head";
import { useRef, useState } from "react";
import { Spin as Hamburger } from "hamburger-react";
import {
  faGear,
  faAdd,
  faRightToBracket,
  faArrowLeft,
  faArrowRight,
} from "@fortawesome/free-solid-svg-icons";
import { motion } from "framer-motion";
import { NavLink, NavButton } from "~/components/navButton";
import { useUser } from "@clerk/nextjs";
import Tab from "~/components/tab";

import { useEffect } from "react";
import { api } from "~/utils/api";
import RoomCard from "~/components/roomCard";
import OverlaySpinner from "~/components/utils/overlaySpinner";
import Spinner from "~/components/utils/spinner";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

const Home: NextPage = () => {
  const tabs = ["Main", "Friend"];

  const [menuOpen, setMenuOpen] = useState(false);
  const [selectedTab, setSelectedTab] = useState<string>(tabs[0] ?? "");
  const [limit, setLimit] = useState(1);

  const [page, setPage] = useState(0);
  const {
    data: roomData,
    fetchNextPage,
    isLoading: roomLoading,
  } = api.room.infiniteRoom.useInfiniteQuery(
    {
      limit: limit,
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
      refetchOnMount: true,
    }
  );

  const handleFetchNextPage = () => {
    void fetchNextPage();
    setPage((prev) => prev + 1);
  };

  const handleFetchPreviousPage = () => {
    setPage((prev) => prev - 1);
  };

  const toShow = roomData?.pages[page]?.rooms;
  const nextCursor = roomData?.pages[page]?.nextCursor;

  const user = useUser();

  const ref = useRef<HTMLDivElement>(null);

  const { mutate: upsertUser } = api.user.upsertUser.useMutation();
  useEffect(() => {
    if (user.isLoaded && user.isSignedIn) {
      upsertUser();
    }
  }, [user.isLoaded]);

  useEffect(() => {
    if (!ref.current) return;
    setLimit(Math.floor((ref.current.clientHeight - 160) / 192) + 1);
  }, []);

  return (
    <>
      <Head>
        <title>Group Listen</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center overflow-hidden bg-slate-800 ">
        {/* Main */}
        <div
          className="flex h-screen min-h-screen w-full flex-col border border-y-0 border-slate-100 xl:w-2/3"
          ref={ref}
        >
          <Tab
            tabs={tabs}
            selectedTab={selectedTab}
            setSelectedTab={setSelectedTab}
          />
          <div className="flex h-full flex-col">
            {toShow && !roomLoading ? (
              toShow.map((room) => <RoomCard key={room.id} room={room} />)
            ) : (
              <Spinner />
            )}
          </div>
          <div className="flex h-20 flex-row justify-evenly bg-slate-900">
            <motion.button
              whileHover={{ scale: 1.2 }}
              whileTap={{ scale: 0.8 }}
              disabled={page === 0}
              onClick={handleFetchPreviousPage}
              className="text-slate-100 disabled:text-slate-600"
            >
              <FontAwesomeIcon icon={faArrowLeft} className="h-8 w-8 " />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.2 }}
              whileTap={{ scale: 0.8 }}
              disabled={!nextCursor}
              onClick={handleFetchNextPage}
              className="text-slate-100 disabled:text-slate-600"
            >
              <FontAwesomeIcon icon={faArrowRight} className="h-8 w-8" />
            </motion.button>
          </div>
        </div>

        <div className="absolute left-8 bottom-20 flex flex-col gap-4">
          {user.isSignedIn ? (
            <>
              <NavLink
                menuOpen={menuOpen}
                closedY={150}
                icon={faGear}
                href="/setting"
              />
              <NavLink
                menuOpen={menuOpen}
                closedY={80}
                icon={faAdd}
                href="/create"
              />
            </>
          ) : (
            <NavButton
              menuOpen={menuOpen}
              closedY={80}
              icon={faRightToBracket}
            />
          )}

          <motion.button
            className="flex h-16 w-16 items-center justify-center rounded-full bg-slate-900"
            onClick={() => {
              setMenuOpen(!menuOpen);
            }}
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            <Hamburger
              toggled={menuOpen}
              toggle={setMenuOpen}
              direction="right"
              color="white"
            />
          </motion.button>
        </div>
      </main>
    </>
  );
};

export default Home;
