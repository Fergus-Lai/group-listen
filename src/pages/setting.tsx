import { type NextPage } from "next";
import Head from "next/head";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faRightToBracket } from "@fortawesome/free-solid-svg-icons";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import LogOutModal from "~/components/modal/logOutModal";
import { AnimatePresence } from "framer-motion";
import Switch from "react-switch";
import { api } from "~/utils/api";
import BackToHomeButton from "~/components/backToHomeButton";
import { useClerk, useUser } from "@clerk/nextjs";
import Icon from "~/components/icon";
import DeleteModal from "~/components/modal/deleteModal";
import OverlaySpinner from "~/components/utils/overlaySpinner";

// TODO: Implement Delete Account

const Setting: NextPage = () => {
  const { user, isLoaded, isSignedIn } = useUser();
  const router = useRouter();
  const [logOutModalOpen, setLogOutModalOpen] = useState(false);
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [displayTag, setDisplayTag] = useState<boolean>(false);
  const { mutateAsync: updateTag } = api.user.updateTag.useMutation();
  const [disableSwitch, setDisableSwitch] = useState(false);
  const {
    data: userData,
    isLoading: userDataLoading,
    refetch: userRefetch,
  } = api.user.getUser.useQuery();

  const { signOut } = useClerk();

  const { mutateAsync: deleteUser } = api.user.deleteUser.useMutation();

  const deleteAccount = async () => {
    await deleteUser();
    await signOut();
    void router.push("/");
  };

  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      void router.push("/");
      return;
    }
  }, [isLoaded, isSignedIn, router]);

  useEffect(() => {
    if (userDataLoading || !userData) return;
    setDisplayTag(!!userData.discriminator);
  }, [userDataLoading, userData]);

  useEffect(() => {
    if (!user && isLoaded) void router.push("/");
  }, [user, isLoaded, router]);

  return (
    <>
      <Head>
        <title>Setting â€¢ Group Listen</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center gap-2 bg-slate-800 py-8 text-white">
        {isLoaded && !userDataLoading && userData ? (
          <>
            <div className="flex w-2/3 flex-row items-center gap-2 text-left text-xl font-bold">
              <BackToHomeButton />
              Setting
            </div>
            <AnimatePresence initial={false} mode="sync">
              {logOutModalOpen && (
                <LogOutModal
                  closeHandler={() => void setLogOutModalOpen(false)}
                ></LogOutModal>
              )}
            </AnimatePresence>
            <AnimatePresence initial={false} mode="sync">
              {deleteModalOpen && (
                <DeleteModal
                  closeHandler={() => void setDeleteModalOpen(false)}
                  deleteHandler={deleteAccount}
                ></DeleteModal>
              )}
            </AnimatePresence>
            <div className="w-2/3 text-lg font-semibold">Profile</div>
            <div className="mt-2 flex w-2/3 flex-col items-center gap-2 rounded-lg bg-slate-900 p-2 text-slate-300">
              <div className="flex w-full flex-row items-center justify-between text-center">
                <div className="truncate text-lg font-bold text-slate-100">
                  {userData?.name ?? ""}
                  {userData?.discriminator ? `#${userData.discriminator}` : ""}
                </div>
                <div className="h-16 w-16 rounded-full">
                  <Icon src={userData.image} />
                </div>
              </div>
              <div className="flex w-full flex-row items-center justify-between">
                Display Discord Tag
                <Switch
                  disabled={disableSwitch}
                  onChange={() => {
                    setDisableSwitch(true);
                    updateTag({ displayTag: !displayTag })
                      .then(() => {
                        userRefetch()
                          .then(() => setDisableSwitch(false))
                          .catch(() => toast.error("Error Occurred"));
                      })
                      .catch(() => toast.error("Error Occurred"));
                    setDisplayTag(!displayTag);
                    return;
                  }}
                  checked={displayTag}
                />
              </div>
            </div>
            <div className="w-2/3 text-lg font-semibold">Account Setting</div>
            <div className="flex w-2/3 gap-2">
              <button
                className="flex w-32 flex-row items-center justify-between rounded-lg border-2 border-red-500 p-2 hover:bg-red-500"
                onClick={() => void setLogOutModalOpen(true)}
              >
                Log Out
                <FontAwesomeIcon icon={faRightToBracket} className="w-4" />
              </button>
              <button
                onClick={() => void setDeleteModalOpen(true)}
                className="flex w-32 flex-row items-center justify-between rounded-lg bg-red-500 p-2 hover:opacity-50"
              >
                Delete Account
              </button>
            </div>
          </>
        ) : (
          <OverlaySpinner />
        )}
      </main>
    </>
  );
};

export default Setting;
